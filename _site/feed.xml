<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2022-10-21T00:53:10+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ohjongsung’s Dev Story</title><subtitle>개발 블로그입니다. &lt;a href=&quot;https://github.com/ohjongsung/ohjongsung.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@github&lt;/a&gt;.</subtitle><author><name>Ohjongsung's Dev Story</name><email>ohjongsung@gmail.com</email></author><entry><title type="html">도커 컨테이너에서 Java Heap Memory 설정</title><link href="http://localhost:4000/%EB%8F%84%EC%BB%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%97%90%EC%84%9C-Java-Heap-memory-%EC%84%A4%EC%A0%95/" rel="alternate" type="text/html" title="도커 컨테이너에서 Java Heap Memory 설정" /><published>2022-08-15T00:00:00+09:00</published><updated>2022-08-15T00:00:00+09:00</updated><id>http://localhost:4000/%EB%8F%84%EC%BB%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%97%90%EC%84%9C-Java-Heap-memory-%EC%84%A4%EC%A0%95</id><content type="html" xml:base="http://localhost:4000/%EB%8F%84%EC%BB%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%97%90%EC%84%9C-Java-Heap-memory-%EC%84%A4%EC%A0%95/"><![CDATA[<p>##Java Container Heap Memory 설정 변화 흐름</p>

<h3 id="jdk-8u131-jdk-9">JDK 8u131+, JDK 9</h3>
<p>컨테이너에 할당된 메모리의 25% 를 힙 메모리로 할당한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap
</code></pre></div></div>
<p>MaxRAMFraction 설정으로 비율을 조정할 수 있다.</p>

<p>1 = 할당 메모리 100%</p>

<p>2 = 할당 메모리 50%</p>

<p>3 = 할당 메모리 33%</p>

<p>4 = 할당 메모리 25% 를 힙 메모리로 할당한다. (기본값)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=2
</code></pre></div></div>

<h3 id="jdk-8u191-jdk-10-11-etc">JDK 8u191+, JDK 10, 11 etc</h3>
<p>UseContainerSupport 옵션이 기본적으로 활성화 되었기 때문에 컨테이너에서 설정한 메모리를 자동으로 인식하고 적용된다.</p>

<p>(JDK 10 에 추가된 기능을 JDK 8u191+ 에도 적용해줌)</p>

<p>즉, 아무런 설정을 하지 않아도 자동으로 25% 비율로 힙 메모리를 할당한다.</p>

<p>그리고 동일하게 MaxRAMFraction 으로 힙 메모리 비율을 조정 할 수 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-XX:MaxRAMFraction=2
</code></pre></div></div>

<h3 id="jdk-10">JDK 10+</h3>
<p><strong>InitialRAMPercentage, MinRAMPercentage, MaxRAMPercentage</strong>
MaxRAMFraction 설정보다 커스텀하기 쉬워서 메모리 낭비를 줄일 수 있는 설정</p>

<p>(JDK 10 에 추가된 기능을 JDK 8u191+ 에서도 사용가능하게 적용해 줌)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-XX:InitialRAMPercentage=75.0 -XX:MinRAMPercentage=50.0 -XX:MaxRAMPercentage=75.0
</code></pre></div></div>

<h4 id="initialrampercentage">InitialRAMPercentage</h4>
<p>‘-XX:InitialRAMPercentage’ JVM 인수는 자바 애플리케이션의 초기 힙 크기를 계산하는 데 사용된다.</p>

<p>-XX:InitialRAMPercentage=25.0 로 설정하고 전체 물리적 메모리(또는 컨테이너 메모리)가 1GB인 경우 Java 애플리케이션의 힙 크기는 ~250MB(즉, 1GB의 25%)가 된다.</p>

<h4 id="minrampercentage">MinRAMPercentage</h4>
<p>‘-XX:MinRAMPercentage’ JVM 인수는 물리적 서버(또는 컨테이너)에서 사용 가능한 전체 메모리 크기가 <strong>250MB(대략) 미만인 경우에만 Java 힙 크기를 계산하는 데 사용된다.</strong></p>

<p>-XX:MinRAMPercentage=50.0 로 설정하고 전체 물리적 메모리(또는 컨테이너) 메모리가 100MB라고 가정하면 Java 애플리케이션의 최대 힙 크기는 50MB(즉, 100MB의 50%)로 설정됩니다.</p>

<p>JDK 개발팀이 이름을 엉망으로 지어서, 최대 힙 사이즈를 설정하는 값으로 착각하게 만든다.</p>

<p><strong>프로덕션 레벨에서 전체 메모리 크기를 250MB 이하로 할 일이 거의 없으므로 사용할 일이 없어 보인다.</strong></p>

<h4 id="maxrampercentage">MaxRAMPercentage</h4>
<p>‘-XX : MaxRamperCentage’ JVM 인수는 실제 서버 (또는 컨테이너)에서 전반적인 메모리 크기가 <strong>250MB (대략) 이상인 경우에만 Java 힙 크기를 계산하는 데 사용된다.</strong></p>

<p>-XX : MaxRamperCentage = 75.0 로 설정하고 전체 물리 서버 (또는 컨테이너) 메모리가 1GB라고 가정하면 Java 응용 프로그램의 최대 힙 크기는 750MB (즉, 1GB의 75%)로 설정된다.</p>

<h3 id="주의사항">주의사항</h3>
<p>‘-XX:InitialRAMPercentage’는 ‘-Xms’ JVM 인수가 전달되지 않은 경우에만 초기 힙 크기를 설정하는 데 사용된다.</p>

<p>‘-Xms’ JVM 인수가 전달되면 JVM에서 ‘-XX:InitialRAMPercentage’를 무시한다.</p>

<p>‘-XX:MaxRAMPercentage’ 및 ‘-XX:MinRAMPercentage’는 ‘-Xmx’ JVM 인수가 전달되지 않은 경우에만 최대 힙 크기를 설정하는 데 사용된다.</p>

<p>‘-Xmx’ JVM 인수가 전달되면 JVM은 이 두 인수를 무시한다.</p>

<h2 id="reference">Reference</h2>

<ul>
  <li>https://dzone.com/articles/best-practices-java-memory-arguments-for-container</li>
  <li>https://jogeum.net/32</li>
  <li>https://dzone.com/articles/difference-between-initialrampercentage-minramperc</li>
</ul>]]></content><author><name>Ohjongsung's Dev Story</name><email>ohjongsung@gmail.com</email></author><summary type="html"><![CDATA[##Java Container Heap Memory 설정 변화 흐름]]></summary></entry><entry><title type="html">Postgresql Local 설치 정리</title><link href="http://localhost:4000/Postgresql-Local-%EC%84%A4%EC%B9%98-%EC%A0%95%EB%A6%AC/" rel="alternate" type="text/html" title="Postgresql Local 설치 정리" /><published>2022-06-30T00:00:00+09:00</published><updated>2022-06-30T00:00:00+09:00</updated><id>http://localhost:4000/Postgresql-Local-%EC%84%A4%EC%B9%98-%EC%A0%95%EB%A6%AC</id><content type="html" xml:base="http://localhost:4000/Postgresql-Local-%EC%84%A4%EC%B9%98-%EC%A0%95%EB%A6%AC/"><![CDATA[<p>Postgresql 커넥션 관련해서 테스트 및 확인할 일이 있어서 로컬에 설치했던 내용을 정리한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull postgres
docker volume create pgdata

docker run <span class="nt">-d</span> <span class="nt">-p</span> 5432:5432 <span class="nt">--name</span> postgres <span class="se">\</span>
   <span class="nt">--restart</span> unless-stopped <span class="se">\</span>
   <span class="nt">-e</span> <span class="nv">POSTGRES_PASSWORD</span><span class="o">=</span>12345 <span class="se">\</span>
   <span class="nt">-v</span> pgdata:/var/lib/postgresql/data <span class="se">\</span>
    postgres:14
</code></pre></div></div>

<ol>
  <li>–name postgres-container : 컨테이너 이름 지정.</li>
  <li>–restart unless-stopped : 따로 stop 명령을 보내지 않으면 컨테이너 재시작의 경우에도 자동 실행됨.</li>
  <li>-p 5432:5432 : postgreSQL이 사용할 포트 번호 기재</li>
  <li>-e POSTGRES_PASSWORD=123456 : postgreSQL DB에 대한 비밀번호 설정.</li>
  <li>-v 볼륨 정보 : 컨테이너가 사용할 볼륨 정보 기재.</li>
  <li>postgres:14 : 실행할 postgreSQL 컨테이너 버전.</li>
</ol>

<p>컨테이너를 생성할 때 기본 사용자명이나 기본 데이터베이스 이름를 변경할 수 있다.
아래 환경 변수들을 사용해서 기본 값을 지정할 수 있다.</p>

<table>
  <tbody>
    <tr>
      <td>POSTGRES_USER</td>
      <td>사용자명 설정 (기본값: postgres)</td>
    </tr>
    <tr>
      <td>POSTGRES_DB</td>
      <td>기본 데이터베이스 이름 설정 (기본값: POSTGRES_USER 값)</td>
    </tr>
  </tbody>
</table>

<p>둘 다 입력하지 않으면 postgres라는 이름으로 기본 사용자와 데이터베이스가 각각 생성됩니다.</p>

<h3 id="postgresql-진입">postgresql 진입</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 한번에 진입</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> postgres psql <span class="nt">-U</span> postgres

<span class="c"># 두단계 진입</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> postgres /bin/bash
root@caa78328d590:/# psql <span class="nt">-U</span> postgres

<span class="c"># 나가기</span>
/q
</code></pre></div></div>

<h3 id="새로운-계정-생성">새로운 계정 생성</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE USER <span class="nb">test </span>PASSWORD <span class="s1">'1234'</span> SUPERUSER<span class="p">;</span>
alter user <span class="nb">test </span>with createdb<span class="p">;</span>

<span class="nv">postgres</span><span class="o">=</span><span class="c"># \du</span>
</code></pre></div></div>

<h3 id="새로운-db-생성">새로운 DB 생성</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>create database testdb<span class="p">;</span> 
grant all privileges on database testdb to <span class="nb">test</span><span class="p">;</span>

<span class="se">\l</span>

<span class="se">\c</span>onnect testdb
</code></pre></div></div>

<h3 id="컨테이너-셧다운-및-삭제">컨테이너 셧다운 및 삭제</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker stop postgres
docker <span class="nb">rm </span>postgres
</code></pre></div></div>

<p>이렇게 작업하고 다시 컨테이너를 뛰웠을 때, 계정정보가 지속되는지 확인해보자.</p>

<h3 id="커넥션-url-양식">커넥션 URL 양식</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"postgresql://postgres:12345@localhost:5432/postgres"
“postgresql://{아이디}:{비번}@{IP주소}:{포트}/{database이름}”
</code></pre></div></div>

<h2 id="reference">Reference</h2>

<ul>
  <li>https://devinlife.com/postgresql/run-postgresql-on-docker/</li>
  <li>https://judo0179.tistory.com/96</li>
  <li>https://velog.io/@haeny01/Docker-Docker-X-PostgreSQL-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%97%B0%EB%8F%99</li>
  <li>https://kanoos-stu.tistory.com/23</li>
  <li>https://psychoria.tistory.com/783</li>
</ul>]]></content><author><name>Ohjongsung's Dev Story</name><email>ohjongsung@gmail.com</email></author><summary type="html"><![CDATA[Postgresql 커넥션 관련해서 테스트 및 확인할 일이 있어서 로컬에 설치했던 내용을 정리한다.]]></summary></entry><entry><title type="html">Systemd 와 Too Many Open Files 이슈</title><link href="http://localhost:4000/Systemd-%EC%99%80-Too-many-open-files-%EC%9D%B4%EC%8A%88/" rel="alternate" type="text/html" title="Systemd 와 Too Many Open Files 이슈" /><published>2021-11-27T00:00:00+09:00</published><updated>2021-11-27T00:00:00+09:00</updated><id>http://localhost:4000/Systemd-%EC%99%80-Too-many-open-files-%EC%9D%B4%EC%8A%88</id><content type="html" xml:base="http://localhost:4000/Systemd-%EC%99%80-Too-many-open-files-%EC%9D%B4%EC%8A%88/"><![CDATA[<p>카프카 클러스터를 최초에 구축할 때, ‘recommend at least 128000 allowed for file descriptors ‘ 라는 가이드를 확인하고, /etc/security/limits.conf 에 적용을 했었다.</p>

<p><img src="systemd01.png" alt="systemd01" /></p>

<p>그런데 사용중에 아래와 같은 에러가 발생했다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ERROR Error while accepting connection (kafka.network.Acceptor)

java.io.IOException: Too many open files

           at sun.nio.ch.ServerSocketChannelImpl.accept0(Native Method)

           at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:419)

           at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:247)

           at kafka.network.Acceptor.accept(SocketServer.scala:615)

           at kafka.network.Acceptor.run(SocketServer.scala:544)

           at java.lang.Thread.run(Thread.java:748)
</code></pre></div></div>

<p>그래서 장애발생시점의 Open File Descriptor 와 Network Sockstat 확인 해보니</p>

<p>두 값의 합 <strong>(프로세스가 가질 수 있는 소켓 포함 파일 개수)</strong> 가 4096에 가깝다는 것을 확인하고,</p>

<p>Java 기반의 카프카가 MaxFDLimit 에 의해 open files 값을 4096 으로 설정한 것으로 추정되서 확인해봤다.</p>

<p><img src="systemd02.png" alt="systemd02" /></p>

<p><strong>/etc/security/limits 설정이 반영되지 않은 이유</strong></p>

<p>카프카 클러스터는 systemd 를 사용해서 구동중인데, **systemd 가 /etc/security/limits 설정을 무시하는 것을 확인했다.</p>

<p><a href="https://serverfault.com/questions/628610/increasing-nproc-for-processes-launched-by-systemd-on-centos-7/678861#678861">https://serverfault.com/questions/628610/increasing-nproc-for-processes-launched-by-systemd-on-centos-7/678861#678861</a></p>

<p>Systemd 설정에 LimitNOFILE=128000 을 추가해서 카프카 클러스터 재시작해서 해결했다.</p>

<p><img src="systemd03.png" alt="systemd03" /></p>]]></content><author><name>Ohjongsung's Dev Story</name><email>ohjongsung@gmail.com</email></author><summary type="html"><![CDATA[카프카 클러스터를 최초에 구축할 때, ‘recommend at least 128000 allowed for file descriptors ‘ 라는 가이드를 확인하고, /etc/security/limits.conf 에 적용을 했었다.]]></summary></entry><entry><title type="html">Clean Method</title><link href="http://localhost:4000/Clean-Method/" rel="alternate" type="text/html" title="Clean Method" /><published>2021-08-15T00:00:00+09:00</published><updated>2021-08-15T00:00:00+09:00</updated><id>http://localhost:4000/Clean-Method</id><content type="html" xml:base="http://localhost:4000/Clean-Method/"><![CDATA[<p>가능한 충분히 작은 사이즈로 한 가지 역할만 수행하고, 테스트 가능하고 중복이 없어야 한다. 파리미터 개수는 줄이고, 내부 코드를 보거나 API 문서를 보지 않아도 될만큼 이해하기 쉽게 만들어야 한다.</p>

<h2 id="파라미터">파라미터</h2>

<p>파라미터 개수가 3개 이상일 때, 메소드가 너무 많은 역할을 하고 있을 가능성이 있다. 메소드 분할을 하거나 파라미터 오브젝트를 사용한다.</p>

<h3 id="메소드-분할">메소드 분할</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">calculate</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="s">"add"</span><span class="o">);</span>

<span class="c1">// refactoring</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">divide</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
</code></pre></div></div>

<h2 id="메소드-크기">메소드 크기</h2>

<p>똑같은 크기(줄 수)라도 품질은 다를 수 있다. 라인 수 보다 코드 품질에 대해서 끊임 없이 고민하고 개선해야 한다. 읽고 이해하기 쉬운가? 메소드 동작을 설명하기 위해 주석을 달아야한다면?! 더 작게 분할 가능한가? 등</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">saveUser</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
	<span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
	<span class="k">if</span><span class="o">(</span><span class="n">email</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">email</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"@"</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">email</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"."</span><span class="o">))</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(!</span><span class="n">isDuplicateEmail</span><span class="o">(</span><span class="n">email</span><span class="o">))</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">lenght</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="o">&amp;&amp;</span> <span class="n">password</span><span class="o">.</span><span class="na">lenght</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">user</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">saveUser</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">UserException</span> <span class="o">{</span>
	<span class="n">validateEmailFormat</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
	<span class="n">validateEmailDuplication</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
	<span class="n">validatePassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
	
	<span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
	
	<span class="n">user</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>

<span class="o">}</span>
</code></pre></div></div>

<h2 id="메소드-추상화-레벨">메소드 추상화 레벨</h2>

<table>
  <thead>
    <tr>
      <th>High Level</th>
      <th>Intermediate Level</th>
      <th>Low Level</th>
      <th>Lower Level</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>회원가입</td>
      <td>사용자 정보 저장</td>
      <td>이메일 포멧 검증</td>
      <td>이메일 @ 체크</td>
    </tr>
    <tr>
      <td> </td>
      <td>이메일 발송</td>
      <td>이메일 중복 검증</td>
      <td>패스워드 길이 체크</td>
    </tr>
    <tr>
      <td> </td>
      <td>쿠폰 발행</td>
      <td>패스워드 검증</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>추상화의 수준은 높을 수록 무엇을 하는 건지에 대해 말하고, 낮을 수록 그것을 어떻게 하는지를 말한다.</p>

<h3 id="하나의-메소드는-동일한-추상화-수준만-가져야-한다">하나의 메소드는 동일한 추상화 수준만 가져야 한다.</h3>

<p>아래의 코드를 보면, 하나의 메소드에 추상화 수준이 뒤섞여 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">saveUser</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
	<span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
	<span class="k">if</span><span class="o">(</span><span class="n">email</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">email</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"@"</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">email</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"."</span><span class="o">))</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(!</span><span class="n">isDuplicateEmail</span><span class="o">(</span><span class="n">email</span><span class="o">))</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">lenght</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="o">&amp;&amp;</span> <span class="n">password</span><span class="o">.</span><span class="na">lenght</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">user</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이를 개선하면, (대충 맥락만 이해하자)</p>

<p>클래스 내의 메소드 순서는 추상화 레벨 High 에서 Low 순으로 작성한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">String</span> <span class="nf">signUp</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
	<span class="n">saveUser</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
	<span class="n">sendWelcomeEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
	<span class="n">issueCoupon</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
	
	<span class="k">return</span> <span class="s">"success"</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">saveUser</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">UserException</span> <span class="o">{</span>
	<span class="n">validateEmailFormat</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
	<span class="n">validateEmailDuplication</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
	<span class="n">validatePassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
	
	<span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
	
	<span class="n">user</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="nf">validateEmailFormat</span><span class="o">(</span><span class="n">email</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">UserException</span> <span class="o">{</span>
	<span class="k">if</span><span class="o">(!</span><span class="n">email</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"@"</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">email</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"."</span><span class="o">))</span> <span class="o">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nf">UserException</span><span class="o">(...);</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="nf">validateEmailDuplication</span><span class="o">(</span><span class="n">email</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">UserException</span> <span class="o">{</span>
	<span class="k">if</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getUserByEmail</span><span class="o">(</span><span class="n">email</span><span class="o">))</span> <span class="o">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nf">UserException</span><span class="o">(...);</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="nf">validatePassword</span><span class="o">(</span><span class="n">password</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">UserException</span> <span class="o">{</span>
	<span class="k">if</span><span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">lenght</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">5</span> <span class="o">||</span> <span class="n">password</span><span class="o">.</span><span class="na">lenght</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nf">UserException</span><span class="o">(...);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Ohjongsung's Dev Story</name><email>ohjongsung@gmail.com</email></author><summary type="html"><![CDATA[가능한 충분히 작은 사이즈로 한 가지 역할만 수행하고, 테스트 가능하고 중복이 없어야 한다. 파리미터 개수는 줄이고, 내부 코드를 보거나 API 문서를 보지 않아도 될만큼 이해하기 쉽게 만들어야 한다.]]></summary></entry><entry><title type="html">Java Functional Interface</title><link href="http://localhost:4000/Java-Functional-Interface/" rel="alternate" type="text/html" title="Java Functional Interface" /><published>2021-04-18T00:00:00+09:00</published><updated>2021-04-18T00:00:00+09:00</updated><id>http://localhost:4000/Java-Functional-Interface</id><content type="html" xml:base="http://localhost:4000/Java-Functional-Interface/"><![CDATA[<p>함수형 인터페이스는 오직 하나의 추상 메소드만 갖는 인터페이스를 말한다. Java 8 부터 가능해진 디폴트 메서드는 여러개 있어도 추상 메소드만 하나면, 함수형 인터페이스이다. 함수형 인터페이스를 사용하는 이유는 자바의 람다식은 함수형 인터페이스로만 사용이 가능하기 때문이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @FunctionalInterface 어노테이션은 해당 인터페이스가 함수형 인터페이스가 맞는지 검사</span>
<span class="nd">@FunctionalInterface</span> 
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FunctionalInterface</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">(</span><span class="nc">String</span> <span class="n">text</span><span class="o">);</span>
		
		<span class="c1">// default method 는 존재해도 상관없음</span>
    <span class="k">default</span> <span class="kt">void</span> <span class="nf">printDefault</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello Default"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// static method 는 존재해도 상관없음</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printStatic</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello Static"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="자바-기본-함수형-인터페이스">자바 기본 함수형 인터페이스</h2>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html"> java.util.function</a> 을 보면, 더 많은 함수형 인터페이스를 확인할 수 있다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">제목</th>
      <th style="text-align: left">내용</th>
      <th style="text-align: left">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Predicate</td>
      <td style="text-align: left">T -&gt; boolean</td>
      <td style="text-align: left">boolean test(T t)</td>
    </tr>
    <tr>
      <td style="text-align: left">Consumer</td>
      <td style="text-align: left">T -&gt; void</td>
      <td style="text-align: left">void accept(T t)</td>
    </tr>
    <tr>
      <td style="text-align: left">Supplier</td>
      <td style="text-align: left">() -&gt; T</td>
      <td style="text-align: left">T get()</td>
    </tr>
    <tr>
      <td style="text-align: left">Function&lt;T, R&gt;</td>
      <td style="text-align: left">T -&gt; R</td>
      <td style="text-align: left">R apply(T t)</td>
    </tr>
    <tr>
      <td style="text-align: left">Comparator</td>
      <td style="text-align: left">(T, T) -&gt; int</td>
      <td style="text-align: left">int compare(T o1, T o2)</td>
    </tr>
    <tr>
      <td style="text-align: left">Runnable</td>
      <td style="text-align: left">() -&gt; void</td>
      <td style="text-align: left">void run()</td>
    </tr>
  </tbody>
</table>

<h2 id="predicate">Predicate</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Predicate</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="consumer">Consumer</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Consumer</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="supplier">Supplier</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Supplier</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">T</span> <span class="nf">get</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="function">Function</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">R</span> <span class="nf">apply</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="comparator">Comparator</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="no">T</span> <span class="n">o1</span><span class="o">,</span> <span class="no">T</span> <span class="n">o2</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="runnable">Runnable</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Runnable</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Ohjongsung's Dev Story</name><email>ohjongsung@gmail.com</email></author><summary type="html"><![CDATA[함수형 인터페이스는 오직 하나의 추상 메소드만 갖는 인터페이스를 말한다. Java 8 부터 가능해진 디폴트 메서드는 여러개 있어도 추상 메소드만 하나면, 함수형 인터페이스이다. 함수형 인터페이스를 사용하는 이유는 자바의 람다식은 함수형 인터페이스로만 사용이 가능하기 때문이다.]]></summary></entry><entry><title type="html">Spring Boot Starter 구조 뜯어보기</title><link href="http://localhost:4000/Spring-Boot-Starter-%EA%B5%AC%EC%A1%B0-%EB%9C%AF%EC%96%B4%EB%B3%B4%EA%B8%B0/" rel="alternate" type="text/html" title="Spring Boot Starter 구조 뜯어보기" /><published>2021-03-13T00:00:00+09:00</published><updated>2021-03-13T00:00:00+09:00</updated><id>http://localhost:4000/Spring-Boot-Starter-%EA%B5%AC%EC%A1%B0-%EB%9C%AF%EC%96%B4%EB%B3%B4%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/Spring-Boot-Starter-%EA%B5%AC%EC%A1%B0-%EB%9C%AF%EC%96%B4%EB%B3%B4%EA%B8%B0/"><![CDATA[<p>개발을 하다 보면 수 많은 모듈을 만들고 제공하고 관리하게 된다. 제공하는 쪽이나 받는 쪽이나 버전 관리, 설정 등 이래저래 관리하기 힘들다. 그러다 문뜩 Spring Boot Starter 가 생각이 났고 구조를 뜯어보고 응용할 포인트를 찾아봤다.</p>

<p>Spring Boot 서비스의 의존성을 추가할 때, Spring Boot autoconfigure 와 Spring Boot starter 조합을 사용한다. 버전은 신경쓰지 않고 그냥 groupId 와 artifactId 만 추가하고, application.yml 설정을 하면 사용할 수 있게 된다. 어떻게 이것이 가능한지 하나씩 알아보자.</p>

<h1 id="autoconfigure">autoconfigure</h1>

<p>autoconfigure 모듈을 살펴보면, 우리가 사용하지도 않을 수많은 라이브러리가 패키지로 나눠져 있다. 그렇다면 autoconfigure 모듈에는 우리가 사용할지도 모르는 모든 라이브러리들이 미리 준비되어 있는 것일까? 이들을 하나씩 확인해보면, 단순히 configuration 클래스만 있는 것을 알 수 있다.</p>

<p>예를 들어, couchbase 패키지내에 있는 클래스를 보면 CouchbaseAutoConfiguration, CouchbaseProperties 클래스가 있다. 그리고 Conditional 어노테이션으로 실제 동작을 하려면 Couchbase Client 의 특정 클래스가 존재하거나, application.yml 에 spring.couchbase 로 시작하는 설정이 존재해야만 제대로 동작하게끔 구성되어 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span><span class="o">(</span>
    <span class="n">proxyBeanMethods</span> <span class="o">=</span> <span class="kc">false</span>
<span class="o">)</span>
<span class="nd">@ConditionalOnClass</span><span class="o">({</span><span class="nc">Cluster</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">({</span><span class="s">"spring.couchbase.connection-string"</span><span class="o">})</span>
<span class="nd">@EnableConfigurationProperties</span><span class="o">({</span><span class="nc">CouchbaseProperties</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CouchbaseAutoConfiguration</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">CouchbaseAutoConfiguration</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ConfigurationProperties</span><span class="o">(</span>
    <span class="n">prefix</span> <span class="o">=</span> <span class="s">"spring.couchbase"</span>
<span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CouchbaseProperties</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>실제 동작 여부는 제어한다고 쳐도 사용할지도 모르는 라이브러리를 미리 다 땡겨놓고 있는 것은 불필요하다. 하지만, 막상 받아놓은 디펜던시를 확인해보면 couchbase 관련 라이브러리가 존재하지 않는다. 이것이 가능한 이유는 선택전 종속성 설정을 했기 때문이다.</p>

<h2 id="maven-optional-dependencies">Maven Optional Dependencies</h2>

<p>선택적 종속성은 (어떤 이유로 든) 프로젝트를 하위 모듈로 분할 할 수 없는 경우에 사용된다. 일부 종속성이 프로젝트의 특정 기능에만 사용되며 해당 기능을 사용하지 않으면 필요하지 않다는 것이다. 이상적으로 이러한 기능은 코어 프로젝트에 따라 하위 모듈로 분할된다. 이 새로운 서브 프로젝트는 서브 프로젝트의 기능을 사용하기로 결정한 경우 관련 종속이 모두 필요하기 때문에 선택 사항이 아닌 종속성 만 갖는다. 그러나 어떤 이유로 든 프로젝트를 분할 할 수 없을 경우 이러한 종속성은 선택 사항으로 선언된다. 사용자가 선택적 종속성과 관련된 기능을 사용하려면 자신의 프로젝트에서 해당 선택적 종속성을 다시 선언해야한다. 이것이 상황을 처리하는 가장 명확한 방법은 아니지만 선택적 종속성과 종속성 제외는 임시방편이다.</p>

<h3 id="optional-dependencies-사용-이유">optional dependencies 사용 이유</h3>

<ol>
  <li>선택적 종속성은 공간과 메모리를 절약</li>
  <li>라이센스 문제나 Class path 문제를 예방</li>
</ol>

<h3 id="optional-tag-사용방법">optional tag 사용방법</h3>

<p>종속성에 <optional> 요소를 추가하고 true 로 설정한다.</optional></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project&gt;</span>
  ...
  <span class="nt">&lt;dependencies&gt;</span>
    <span class="c">&lt;!-- declare the dependency to be set as optional --&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>sample.ProjectA<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>Project-A<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
      <span class="nt">&lt;scope&gt;</span>compile<span class="nt">&lt;/scope&gt;</span>
      <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span> <span class="c">&lt;!-- value will be true or false only --&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
  <span class="nt">&lt;/dependencies&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<h3 id="optional-dependencies-동작-및-예시">optional dependencies 동작 및 예시</h3>

<p>Project-A (autoconfigure) → Project-B (couchbase)</p>

<p>Project-A 가 Project-B 에 의존할 때, A 가 POM 에 B 를 선택적 종속성으로 선언해도 A 의 종속성 관계에 문제는 발생하지 않는다. Project-A 의 class path 에 Proejct-B 가 추가되는 일반적인 Build 와 똑같이 동작한다.</p>

<p>Project-X (real service) → Project-A (autoconfigure)</p>

<p>Project-X 가 POM 에 Project-A 를 종속성 추가하면, 선택적 종속성 선언 효과가 발생한다. Project-B 는 Project-X 의 class path 에 포함되지 않는다. Project-X 의 POM 에 직접 Proejct-B 의 종속성을 추가해야 한다.</p>

<h2 id="starter">Starter</h2>

<p>이제 Starter 가 무슨 역할을 할지 자연스레 알게 된다. 바로 Project-X 에 직접 종속성을 추가하는 역할을 하는 것이다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>spring-boot-autoconfigure<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-couchbase<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>spring-boot-starter-data-couchbase 를 추가하지 않으면, autoconfigure 안의 couchbase 설정 클래스들은 동작하지 않는다. 왜냐하면, 종속성 클래스들이 class path 에 존재하지 않기 때문이다.</p>

<h2 id="응용하기">응용하기</h2>

<p>위의 개념을 이해하면, 사내 프레임워크 모듈이나 팀 단위 모듈을 제공하거나 사용하기 편해진다.</p>

<p>xxx-spring-boot-autoconfigure 모듈을 만들고, 제공하고 있는 모든 모듈의 configuration 클래스를 작성한다. 그리고 위에서 생략했지만, application.yml 설정이 필요도 없게끔 각종 설정값을 미리 넣어놓던가 아니면 Configuration Metadata 를 추가해서 application.yml 작성의 편의성을 더욱 증가시킬 수 있다. 그리고 모듈을 가져다 쓰는 곳은 starter 만 추가하면 쉽게 사용할 수 있게 된다.</p>

<p>물론, 사내에는 Spring Boot 가 아닌, 레거시도 있고 이미 사용중인 모듈도 있어서 쉽게 구조를 바꾸기는 어렵다. 일단 조금씩 바꿔봐야겠다.</p>]]></content><author><name>Ohjongsung's Dev Story</name><email>ohjongsung@gmail.com</email></author><summary type="html"><![CDATA[개발을 하다 보면 수 많은 모듈을 만들고 제공하고 관리하게 된다. 제공하는 쪽이나 받는 쪽이나 버전 관리, 설정 등 이래저래 관리하기 힘들다. 그러다 문뜩 Spring Boot Starter 가 생각이 났고 구조를 뜯어보고 응용할 포인트를 찾아봤다.]]></summary></entry><entry><title type="html">정보은닉 Information Hiding</title><link href="http://localhost:4000/%EC%A0%95%EB%B3%B4%EC%9D%80%EB%8B%89-Information-hiding/" rel="alternate" type="text/html" title="정보은닉 Information Hiding" /><published>2021-02-21T00:00:00+09:00</published><updated>2021-02-21T00:00:00+09:00</updated><id>http://localhost:4000/%EC%A0%95%EB%B3%B4%EC%9D%80%EB%8B%89-Information-hiding</id><content type="html" xml:base="http://localhost:4000/%EC%A0%95%EB%B3%B4%EC%9D%80%EB%8B%89-Information-hiding/"><![CDATA[<p>인터넷에서 정보은닉에 대해 검색하면 private 접근 제어자를 사용해서 내부 데이터에 대한 접근을 막고 getter / setter 를 사용해서 접근하는 것으로 설명하고 있다. 이는 데이터 캡슐화로 엄밀히 말해서 정보은닉이라고 할 수 없다.</p>

<p>객체지향 언어의 장점이라고 하면 생산성, 재사용성, 유지보수 용이성이라고 한다. 이 장점들의 공통점이 뭘까? 빠르게 변화해가는 서비스 구조에 유연하게 대처할 수 있게 해준다는 점이다. <strong>객체지향 언어는 유연성을 갖고 있는데, 이를 가능케 하는 것은 정보은닉이다.</strong></p>

<p>모듈은 두 가지 비밀을 감추어야 한다.</p>

<ul>
  <li>
    <p>첫 번째는 복잡성이다. 모듈이 너무 복잡하면 이해하고 사용하기가 어렵다. 그래서 인터페이스를 제공해서 모듈의 복잡도를 낮춘다. 외부에서는 인터페이스만 파악하고 사용하면 된다. <strong>최대한 외부에서 알아야 할 정보를 줄이자.</strong></p>
  </li>
  <li>
    <p>두 번째는 변경 가능성이다. 변경 될 부분이 외부에서 이미 사용되고 있다면 파급 효과가 커진다. 그래서 외부에는 쉽게 변경되지 않을 인터페이스만 제공하고 모든 변경은 모듈 내부에서만 일어나게 한다. <strong>최대한 외부에 호출(사용)되는 부분을 줄이자.</strong></p>
  </li>
</ul>

<p>위의 두 가지 비밀을 감추는 것이 정보은닉이다. 정보은닉은 모듈을 설계하고 분할하기 위한 기본 원리로써 변경에 대한 유연성을 제공한다. 정보 은닉의 원리에 따라 설계된 서비스는 변경에 대한 파급효과 범위가 작아서 변경에 대한 비용이 적다. 그리고 적절히 모듈화 된 코드는 분석하기 위한 코드의 양이 적기 때문에 파악하고 사용하기 쉽다. 또한 개발자들이 다수의 업무를 동시에 진행할 수 있게 일을 나눌 때, 서로 알아야 하는 정보의 양(회의 시간)을 줄이면서 독립적으로 작업을 진행 할 수 있게 한다. 쉽게 말해서 상대쪽에서 제공해준 인터페이스 구조만 파악하고 사용하면 어떻게든 원하는 데이터를 넘겨준다고 믿고 내 작업만 하는거다.</p>

<p>정보은닉의 개념을 이해하고 나면 객체지향 설계(SOLID) 도 이해하기 쉬워진다. 간단히 정리해보면,</p>

<ul>
  <li>
    <p>단일 책임 원칙 (Single Responsiblity Principle) : 모든 클래스는 각각 하나의 책임만 가져야 한다. 여러 책임을 가지면, 외부에서 이 클래스가 어떤 일하는지 파악해야 하는 정보도 많아지고, 사용(노출)되는 목적도 다양해 진다. 그러면 유연성이 떨어진다.</p>
  </li>
  <li>
    <p>개방-폐쇄 원칙 (Open Closed Principle) : 소프트웨어의 구성요소(컴포넌트, 클래스, 모듈, 함수)는 확장에 열려있고, 변경에는 닫혀있어야 한다. 변경에 대한 파급효과 범위가 크면 유연성이 떨어진다. 최대한 변경 가능성이 큰 부분은 내부로 감추고 외부에서는 변경에 대해 모르게 한다. 또는 변경이 자주 되는 부분을 분리한다.</p>
  </li>
  <li>
    <p>리스코프 치환 원칙 (Liskov Substitution Principle) : 서브 타입은 언제나 기반 타입으로 교체(호환)될 수 있어야 한다. 외부에서 구현 클래스를 사용하고 있으면, 유연하게 클래스 교체를 할 수가 없다. 인터페이스(상위 클래스)에 의존하게 해서  외부에서는 교체 사실도 모르게 하자.</p>
  </li>
  <li>
    <p>인터페이스 분리 원칙 (Interface Segregation Principle) : 한 클래스는 자신이 사용하지않는 인터페이스는 구현하지 말아야 한다. 하나의 일반적인 인터페이스보다 여러개의 구체적인 인터페이스가 낫다. 인터페이스도 여러 책임을 가지면, 외부에 불필요하게 노출되는 정보가 많아진다. 굳이 파악할 필요도 없는 정보까지 분석해야 한다. 인터페이스도 최대한 쪼개자.</p>
  </li>
  <li>
    <p>의존 역전 원칙 (Dependency Inversion Principle) : 상위 모듈은 하위 모듈에 의존해서는 안된다. 상위 모듈과 하위 모듈 모두 추상화에 의존해야 한다. 한마디로 구체적인 클래스보다 인터페이스나 추상 클래스와 관계를 맺으라는 것이다. 서비스가 변해서 다른 구체적인 클래스가 필요할 때 변경에 대한 파급 효과가 크다. 추상 클래스나 인터페이스에 의존해서 쉽게 변경이 가능해야 한다.</p>
  </li>
</ul>

<p>정리하면, 객체지향 설계(SOLID)도 결국은 외부에 노출되는 정보를 줄여서 복잡성(파악이 필요한 범위)를 줄이고, 변경에 대한 파급 효과 범위를 줄이는 것이다. 그러니까 객체지향 설계 5원칙을 추상화하면 정보 은닉의 기본 원리가 된다.</p>

<p>골치아프게 설계 5원칙을 따져보는 것보다 정보은닉의 두 가지 원리만 생각하면 자연스레 설계 5 원칙도 지켜갈 수 있다. 완벽하진 않아도 어느정도 되진 않을까 ㅋㅋㅋ</p>

<h2 id="reference">Reference</h2>

<ul>
  <li>http://egloos.zum.com/aeternum/v/1232020</li>
</ul>]]></content><author><name>Ohjongsung's Dev Story</name><email>ohjongsung@gmail.com</email></author><summary type="html"><![CDATA[인터넷에서 정보은닉에 대해 검색하면 private 접근 제어자를 사용해서 내부 데이터에 대한 접근을 막고 getter / setter 를 사용해서 접근하는 것으로 설명하고 있다. 이는 데이터 캡슐화로 엄밀히 말해서 정보은닉이라고 할 수 없다.]]></summary></entry><entry><title type="html">Prometheus Scaling</title><link href="http://localhost:4000/Prometheus-scaling/" rel="alternate" type="text/html" title="Prometheus Scaling" /><published>2020-11-29T00:00:00+09:00</published><updated>2020-11-29T00:00:00+09:00</updated><id>http://localhost:4000/Prometheus-scaling</id><content type="html" xml:base="http://localhost:4000/Prometheus-scaling/"><![CDATA[<p>사내 K8S에서 운영하는 프로메테우스가 힘들어해서 스케일링이 필요해졌다. 메트릭 데이터를 외부에 저장해서 제공하기로 했다.</p>

<p><a href="https://prometheus.io/docs/operating/integrations/">Integrations</a></p>

<p><a href="https://www.elastic.co/kr/blog/prometheus-monitoring-at-scale-with-the-elastic-stack">https://www.elastic.co/kr/blog/prometheus-monitoring-at-scale-with-the-elastic-stack</a></p>

<h3 id="elasticsearch">elasticsearch</h3>

<p><img src="prometheus-es.png" alt="prometheus-es" /></p>

<p>metricbeat 를 활용해서 prometheus 의 metric data 를 elasticsearch 로 저장하는 방법을 먼저 해보았다.</p>

<p>metricbeat 는 사용하고 있는 kibana version 에 맞춰서 설치해야 한다. 무조건 최신버전으로 하면, 호환이 안된다.</p>

<p>인스톨 가이드</p>

<p><a href="https://www.elastic.co/guide/en/beats/metricbeat/7.10/metricbeat-installation-configuration.html">https://www.elastic.co/guide/en/beats/metricbeat/7.10/metricbeat-installation-configuration.html</a></p>

<p>설정 가이드</p>

<p><a href="https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-metricset-prometheus-remote_write.html">https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-metricset-prometheus-remote_write.html</a></p>

<p>결과</p>

<p><img src="esjson.png" alt="esjson" /></p>

<p>metric data 한 건당 document 가 하나씩 생긴다. 중복 데이터가 어마어마하게 쌓인다고 보면 된다. 조금 더 파고 들면 개선시킬 수도 있겠지만 여기서 일단 중단</p>

<h3 id="federation">Federation</h3>

<p>기존에 있는 사내 공용 프로메테우스와 그라파나를 활용한 방법을 시도해 봤다.</p>

<p><a href="https://prometheus.io/docs/prometheus/latest/federation/">Federation</a></p>

<p>다수의 Prometheus Server 를 띄우고 Metric을 분산하여 수집하는 Horizontal Sharding 기반의 Scaling 기법</p>

<p>모든 Prometheus Server는 자신이 수집한 Metric을 외부에서 가져갈 수 있도록 /federate URL을 제공</p>

<p><img src="federation.png" alt="federation" /></p>

<p>설정</p>

<p>공용 프로메테우스에서 클라우드 프로메테우스를 pulling 하게 설정</p>

<ul>
  <li>bearer_token : 클라우드 프로메테우스에 접근하기 위한 token 생성 및 추가</li>
  <li>job 하나로 했더니, scrape timeout 이 자주 발생했다. 그래서 match params 개수 만큼 job 나누고 scrape 설정도 적절하게 설정했다.</li>
</ul>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scrape_configs:
  - job_name: 'federate01'
    scrape_interval: 1m
    scrape_interval: 15s
		bearer_token: token-sdfsdfhh:aslkdjflasjdlj
    honor_labels: true
    metrics_path: '/federate'

    params:
      'match[]':
        - '{job="expose-kubernetes-metrics"}'

    static_configs:
      - targets:
        - 'source-prometheus-1:9090'

- job_name: 'federate02'
    scrape_interval: 15s
    scrape_interval: 10s
		bearer_token: token-sdfsdfhh:aslkdjflasjdlj
    honor_labels: true
    metrics_path: '/federate'

    params:
      'match[]':
        - '{job="istio/istio-mesh"}'

    static_configs:
      - targets:
        - 'source-prometheus-1:9090'
</code></pre></div></div>

<h2 id="결과">결과</h2>

<p>편하고 빠르다!
그라파나 대시보드도 export &amp; import 해서 사내 공용 그라파나로 옮겼다.</p>]]></content><author><name>Ohjongsung's Dev Story</name><email>ohjongsung@gmail.com</email></author><summary type="html"><![CDATA[사내 K8S에서 운영하는 프로메테우스가 힘들어해서 스케일링이 필요해졌다. 메트릭 데이터를 외부에 저장해서 제공하기로 했다.]]></summary></entry><entry><title type="html">Golang Command Line Flags 와 Docker Env</title><link href="http://localhost:4000/Golang-Command-line-flags-%EC%99%80-docker-env/" rel="alternate" type="text/html" title="Golang Command Line Flags 와 Docker Env" /><published>2020-09-13T00:00:00+09:00</published><updated>2020-09-13T00:00:00+09:00</updated><id>http://localhost:4000/Golang-Command-line-flags-%EC%99%80-docker-env</id><content type="html" xml:base="http://localhost:4000/Golang-Command-line-flags-%EC%99%80-docker-env/"><![CDATA[<p>go 로 api server 를 개발하는데, spring 의 <a href="http://spring.profiles.active">spring.profiles.active</a> 처럼 환경에 맞게 deploy 처럼 할 수 있는 방법 정리</p>

<p><a href="https://mingrammer.com/gobyexample/command-line-flags/">https://mingrammer.com/gobyexample/command-line-flags/</a></p>

<h3 id="command-line-flsgs">command line flsgs</h3>

<p>말 그대로 커맨드 라인에 플래그 값을 주면 코드에서 받아서 사용하는 방법이다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go build command-line-flags.go

./command-line-flags <span class="nt">-word</span><span class="o">=</span>opt <span class="nt">-numb</span><span class="o">=</span>7 <span class="nt">-fork</span> <span class="nt">-svar</span><span class="o">=</span>flag
word: opt
numb: 7
fork: <span class="nb">true
</span>svar: flag
<span class="nb">tail</span>: <span class="o">[]</span>

./command-line-flags <span class="nt">-word</span><span class="o">=</span>opt
word: opt
numb: 42
fork: <span class="nb">false
</span>svar: bar
<span class="nb">tail</span>: <span class="o">[]</span>

./command-line-flags <span class="nt">-word</span><span class="o">=</span>opt a1 a2 a3
word: opt
...
<span class="nb">tail</span>: <span class="o">[</span>a1 a2 a3]

./command-line-flags <span class="nt">-word</span><span class="o">=</span>opt a1 a2 a3 <span class="nt">-numb</span><span class="o">=</span>7
word: opt
numb: 42
fork: <span class="nb">false
</span>svar: bar
<span class="nb">tail</span>: <span class="o">[</span>a1 a2 a3 <span class="nt">-numb</span><span class="o">=</span>7]

./command-line-flags <span class="nt">-h</span>
Usage of ./command-line-flags:
  <span class="nt">-fork</span><span class="o">=</span><span class="nb">false</span>: a bool
  <span class="nt">-numb</span><span class="o">=</span>42: an int
  <span class="nt">-svar</span><span class="o">=</span><span class="s2">"bar"</span>: a string var
  <span class="nt">-word</span><span class="o">=</span><span class="s2">"foo"</span>: a string
</code></pre></div></div>

<h3 id="example-code">example code</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"flag"</span>
<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">wordPtr</span> <span class="o">:=</span> <span class="n">flag</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"word"</span><span class="p">,</span> <span class="s">"foo"</span><span class="p">,</span> <span class="s">"a string"</span><span class="p">)</span>
	<span class="n">numbPtr</span> <span class="o">:=</span> <span class="n">flag</span><span class="o">.</span><span class="n">Int</span><span class="p">(</span><span class="s">"numb"</span><span class="p">,</span> <span class="m">42</span><span class="p">,</span> <span class="s">"an int"</span><span class="p">)</span>
	<span class="n">boolPtr</span> <span class="o">:=</span> <span class="n">flag</span><span class="o">.</span><span class="n">Bool</span><span class="p">(</span><span class="s">"fork"</span><span class="p">,</span> <span class="no">false</span><span class="p">,</span> <span class="s">"a bool"</span><span class="p">)</span>

	<span class="k">var</span> <span class="n">svar</span> <span class="kt">string</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">svar</span><span class="p">,</span> <span class="s">"svar"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="s">"a string var"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"word:"</span><span class="p">,</span> <span class="o">*</span><span class="n">wordPtr</span><span class="p">)</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"numb:"</span><span class="p">,</span> <span class="o">*</span><span class="n">numbPtr</span><span class="p">)</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"fork:"</span><span class="p">,</span> <span class="o">*</span><span class="n">boolPtr</span><span class="p">)</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"svar:"</span><span class="p">,</span> <span class="n">svar</span><span class="p">)</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"tail:"</span><span class="p">,</span> <span class="n">flag</span><span class="o">.</span><span class="n">Args</span><span class="p">())</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="dockerfile">Dockerfile</h3>

<p>도커파일에서는 아래와 같은 방법으로 command line flsgs 를 전달할 수 있다.</p>

<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> golang:onbuild</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["/go/bin/app", "-name=foo", "-title=bar"]</span>
</code></pre></div></div>
<h2 id="실제-활용">실제 활용</h2>

<p>위의 두가지 방법을 조합해서 실제로 사용해보자.</p>

<h3 id="deploymentyaml">Deployment.yaml</h3>

<p>container 의 env 로 profile 값을 정한다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
          <span class="na">env</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">profile</span>
              <span class="na">value</span><span class="pi">:</span> <span class="s">dev</span>
</code></pre></div></div>

<h3 id="dockerfile-1">Dockerfile</h3>

<p>dockerfile 에서는 위에 정한 변수를 받아서 사용하게 설정하면 된다.</p>

<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> golang:onbuild</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["/go/bin/app", "-profile=${profile}"]</span>
</code></pre></div></div>]]></content><author><name>Ohjongsung's Dev Story</name><email>ohjongsung@gmail.com</email></author><summary type="html"><![CDATA[go 로 api server 를 개발하는데, spring 의 spring.profiles.active 처럼 환경에 맞게 deploy 처럼 할 수 있는 방법 정리]]></summary></entry><entry><title type="html">Coucbhase Backup &amp;amp; Restore</title><link href="http://localhost:4000/Coucbhase-Backup-&-restore/" rel="alternate" type="text/html" title="Coucbhase Backup &amp;amp; Restore" /><published>2020-08-15T00:00:00+09:00</published><updated>2020-08-15T00:00:00+09:00</updated><id>http://localhost:4000/Coucbhase-Backup-&amp;-restore</id><content type="html" xml:base="http://localhost:4000/Coucbhase-Backup-&amp;-restore/"><![CDATA[<p>community version 은 cbbackupmgr 를 사용할 수가 없다.</p>

<p>cbbackup 과 cbrestore 를 사용해야 한다.</p>

<h2 id="back-up-all-nodes-and-all-buckets">Back up all nodes and all buckets</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /opt/couchbase/bin/
./cbbackup http://127.0.0.1:8091 /yourfolder/couchbase/backups <span class="nt">-u</span> id-p <span class="nb">pwd</span>
</code></pre></div></div>

<h2 id="backup-shell-script">Backup shell script</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>su - root

<span class="nb">cd</span> /yourfolder/couchbase
vi backup.sh

<span class="c">#!/bin/bash</span>

<span class="nv">TIMESTAMP</span><span class="o">=</span><span class="sb">`</span><span class="nb">date</span> +%Y<span class="se">\%</span>m<span class="se">\%</span>d<span class="se">\%</span>H<span class="se">\%</span>M<span class="sb">`</span>
<span class="nv">OUTPUT</span><span class="o">=</span>/yourfolder/couchbase/backups/db-backup-<span class="nv">$TIMESTAMP</span><span class="p">;</span>
/opt/couchbase/bin/cbbackup http://127.0.0.1:8091 <span class="nv">$OUTPUT</span> <span class="nt">-u</span> admin <span class="nt">-p</span> Ssgcloud#21<span class="p">;</span>

<span class="nb">echo</span> <span class="s2">"bakcup complete </span><span class="nv">$TIMESTAMP</span><span class="s2">"</span> 
<span class="nb">exit </span>0
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 실행 권한 부여</span>
<span class="nb">chmod</span> +x backup.sh
<span class="c"># 등록된 잡 확인</span>
crontab <span class="nt">-l</span>
<span class="c"># 백업 스크립트 등록 : 매일 02:00 에 수행</span>
<span class="c"># cat &lt;(crontab -l) &lt;(echo "0 2 * * * /yourfolder/couchbase/backup.sh") | crontab -</span>
crontab <span class="nt">-e</span>

0 2 <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> /yourfolder/couchbase/backup.sh

<span class="c"># 등록된 잡 확인</span>
crontab <span class="nt">-l</span>

<span class="c"># cron log 확인</span>
<span class="nb">tail</span> <span class="nt">-f</span> /var/log/cron
<span class="c"># cron job 전체 삭제</span>
crontab <span class="nt">-r</span>
</code></pre></div></div>

<h2 id="resotre">Resotre</h2>

<p>cbbackup을 사용하여 백업된 데이터를 복원한다.</p>

<p>bucket 을 미리 생성해놔야 한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /opt/couchbase/bin/
./cbrestore /yourfolder/couchbase/backups/db-backup-<span class="o">{</span>날짜<span class="o">}</span> http://127.0.0.1:8091 <span class="nt">-u</span> id-p <span class="nb">pwd</span>
</code></pre></div></div>

<h3 id="참고자료">참고자료</h3>

<p><a href="https://docs.couchbase.com/server/current/backup-restore/backup-restore.html">https://docs.couchbase.com/server/current/backup-restore/backup-restore.html</a>
<a href="https://docs.couchbase.com/server/current/backup-restore/cbbackupmgr.html">https://docs.couchbase.com/server/current/backup-restore/cbbackupmgr.html</a>
<a href="https://docs.couchbase.com/server/current/cli/cbtools/cbbackup.html">https://docs.couchbase.com/server/current/cli/cbtools/cbbackup.html</a>
<a href="https://docs.couchbase.com/server/current/cli/cbtools/cbrestore.html">https://docs.couchbase.com/server/current/cli/cbtools/cbrestore.html</a></p>]]></content><author><name>Ohjongsung's Dev Story</name><email>ohjongsung@gmail.com</email></author><summary type="html"><![CDATA[community version 은 cbbackupmgr 를 사용할 수가 없다.]]></summary></entry></feed>